# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from server.models.base_model_ import Model
from server import util


class InitResponse(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, initial_image: str=None, final_image: str=None, scores: List[float]=None, mse: float=None, step: float=None):  # noqa: E501
        """InitResponse - a model defined in Swagger

        :param initial_image: The initial_image of this InitResponse.  # noqa: E501
        :type initial_image: str
        :param final_image: The final_image of this InitResponse.  # noqa: E501
        :type final_image: str
        :param scores: The scores of this InitResponse.  # noqa: E501
        :type scores: List[float]
        :param mse: The mse of this InitResponse.  # noqa: E501
        :type mse: float
        :param step: The step of this InitResponse.  # noqa: E501
        :type step: float
        """
        self.swagger_types = {
            'initial_image': str,
            'final_image': str,
            'scores': List[float],
            'mse': float,
            'step': float
        }

        self.attribute_map = {
            'initial_image': 'initialImage',
            'final_image': 'finalImage',
            'scores': 'scores',
            'mse': 'mse',
            'step': 'step'
        }

        self._initial_image = initial_image
        self._final_image = final_image
        self._scores = scores
        self._mse = mse
        self._step = step

    @classmethod
    def from_dict(cls, dikt) -> 'InitResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The initResponse of this InitResponse.  # noqa: E501
        :rtype: InitResponse
        """
        return util.deserialize_model(dikt, cls)

    @property
    def initial_image(self) -> str:
        """Gets the initial_image of this InitResponse.


        :return: The initial_image of this InitResponse.
        :rtype: str
        """
        return self._initial_image

    @initial_image.setter
    def initial_image(self, initial_image: str):
        """Sets the initial_image of this InitResponse.


        :param initial_image: The initial_image of this InitResponse.
        :type initial_image: str
        """

        self._initial_image = initial_image

    @property
    def final_image(self) -> str:
        """Gets the final_image of this InitResponse.


        :return: The final_image of this InitResponse.
        :rtype: str
        """
        return self._final_image

    @final_image.setter
    def final_image(self, final_image: str):
        """Sets the final_image of this InitResponse.


        :param final_image: The final_image of this InitResponse.
        :type final_image: str
        """

        self._final_image = final_image

    @property
    def scores(self) -> List[float]:
        """Gets the scores of this InitResponse.


        :return: The scores of this InitResponse.
        :rtype: List[float]
        """
        return self._scores

    @scores.setter
    def scores(self, scores: List[float]):
        """Sets the scores of this InitResponse.


        :param scores: The scores of this InitResponse.
        :type scores: List[float]
        """

        self._scores = scores

    @property
    def mse(self) -> float:
        """Gets the mse of this InitResponse.


        :return: The mse of this InitResponse.
        :rtype: float
        """
        return self._mse

    @mse.setter
    def mse(self, mse: float):
        """Sets the mse of this InitResponse.


        :param mse: The mse of this InitResponse.
        :type mse: float
        """

        self._mse = mse

    @property
    def step(self) -> float:
        """Gets the step of this InitResponse.


        :return: The step of this InitResponse.
        :rtype: float
        """
        return self._step

    @step.setter
    def step(self, step: float):
        """Sets the step of this InitResponse.


        :param step: The step of this InitResponse.
        :type step: float
        """

        self._step = step
